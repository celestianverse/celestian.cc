@use "sass:color";
@use "sass:math";

$primary: #1A0A2E;
$secondary: #7B7487;
$neutral: #F1F3F7;
$brand: #F0FF48;
$accent: #AD1875;
$utility: #12d1c5;
$contrast: #FFFFFF;
$phantom: rgba(255, 255, 255, 0.6);
$info: #0B95D6;
$success: #1CB474;
$warning: #F17400;
$danger: #C21B1B;
$rating: #FFB800;

$colors: (
  primary,
  secondary,
  neutral,
  brand,
  accent,
  utility,
  contrast,
  phantom,
  info,
  success,
  warning,
  danger,
  rating,
);

@mixin desktop-only {
  @media (min-width: 1367px) and (max-width: 1920px) {
    @content;
  }
}

@mixin desktop-max {
  @media (max-width: 1920px) {
    @content;
  }
}

@mixin desktop-min {
  @media (min-width: 1367px) {
    @content;
  }
}

@mixin laptop-only {
  @media (min-width: 1220px) and (max-width: 1366px) {
    @content;
  }
}

@mixin laptop-max {
  @media (max-width: 1366px) {
    @content;
  }
}

@mixin laptop-min {
  @media (min-width: 1220px) {
    @content;
  }
}

@mixin tablet-only {
  @media (min-width: 768px) and (max-width: 1219px) {
    @content;
  }
}

@mixin tablet-max {
  @media (max-width: 1219px) {
    @content;
  }
}

@mixin tablet-min {
  @media (min-width: 768px) {
    @content;
  }
}

@mixin mobile-only {
  @media (max-width: 767px) {
    @content;
  }
}

@mixin transition($property: all, $duration: 0.3s, $delay: 0s) {
  transition: $property $duration ease-in-out $delay;
}

@mixin backdrop($color, $blur) {
  background: $color;

  @supports (backdrop-filter: none) {
    background: $color;
    backdrop-filter: blur($blur);
  }
}

@mixin columns($columns) {
  column-count: $columns;
  & > * {
    break-inside: avoid-column;
  }
}

@mixin ellipsis {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

@mixin ellipsis-lines($lines) {
  overflow: hidden;
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  text-overflow: ellipsis;
}

@mixin grid-auto {
  display: grid;
  grid-auto-flow: column;
  grid-auto-columns: max(1fr);
}

@mixin theme-generator($styles, $theme) {
  @each $key, $map in $styles {
    @each $prop, $value in $map {
      @if $prop == $theme {
        --#{$key}: #{$value};
      }
    }
  }
}

@mixin placeholder {
  &[placeholder] {
    &::placeholder {
      opacity: 1;
      letter-spacing: inherit;
      font-size: inherit;
      text-transform: inherit;
      color: inherit;
    }

    &:focus {
      &::placeholder {
        opacity: 0.5;
      }
    }
  }
}

@function mix($color1, $color2, $weight: 50%) {
  $mixed: color.mix($color1, $color2, $weight);

  @return rgba(
      math.round(color.channel($mixed, "red",   $space: rgb)),
      math.round(color.channel($mixed, "green", $space: rgb)),
      math.round(color.channel($mixed, "blue",  $space: rgb)),
      color.channel($mixed, "alpha")
  );
}